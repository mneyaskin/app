import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import scipy.signal as signal
from io import StringIO
import base64

st.set_page_config(
    page_title="Dyno Graph Analyzer",
    page_icon="üìä",
    layout="wide"
)

def calculate_power_and_torque(df, car_mass, drive_loss, power_type, smooth_window):
    """–†–∞—Å—á–µ—Ç –º–æ—â–Ω–æ—Å—Ç–∏ –∏ –º–æ–º–µ–Ω—Ç–∞"""
    df = df.copy()
    
    # –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    cd = 0.32
    frontal_area = 2.2
    air_density = 1.225
    c_rr = 0.015
    g = 9.81

    f_roll = c_rr * car_mass * g
    f_aero = 0.5 * air_density * cd * frontal_area * df['speed_mps'] ** 2
    f_acc = car_mass * df['acceleration']
    total_force = f_roll + f_aero + f_acc

    df['power_watt'] = total_force * df['speed_mps']
    df['power_hp'] = df['power_watt'] / 735.5
    df['torque_nm'] = (df['power_hp'] * 735.5 * 60) / (2 * np.pi * df['rpm'])

    # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
    if smooth_window % 2 == 0:
        smooth_window += 1
    
    if len(df) > smooth_window:
        df['smooth_hp'] = signal.savgol_filter(df['power_hp'], window_length=smooth_window, polyorder=2)
        df['smooth_tq'] = signal.savgol_filter(df['torque_nm'], window_length=smooth_window, polyorder=2)
        df['smooth_rpm'] = signal.savgol_filter(df['rpm'], window_length=smooth_window, polyorder=2)
    else:
        df['smooth_hp'] = df['power_hp']
        df['smooth_tq'] = df['torque_nm']
        df['smooth_rpm'] = df['rpm']

    # –£—á–µ—Ç –ø–æ—Ç–µ—Ä—å —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏
    if power_type == "crank":
        df['final_hp'] = df['smooth_hp'] / (1 - drive_loss)
        df['final_tq'] = df['smooth_tq'] / (1 - drive_loss)
    else:
        df['final_hp'] = df['smooth_hp']
        df['final_tq'] = df['smooth_tq']

    return df

def main():
    st.title("üöó Dyno Graph Analyzer")
    st.markdown("–ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–æ—Å—Ç–µ–Ω–¥–∞ –ø–æ –¥–∞–Ω–Ω—ã–º –ª–æ–≥–æ–≤ —É—Å–∫–æ—Ä–µ–Ω–∏—è")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
    if 'logs' not in st.session_state:
        st.session_state.logs = []
    if 'colors' not in st.session_state:
        st.session_state.colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤",
        type=['csv'],
        accept_multiple_files=True,
        help="–§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: Time [ms], Engine Speed (RPM) [1/min], Vehicle Speed [km/h]"
    )
    
    if uploaded_files:
        for uploaded_file in uploaded_files:
            if uploaded_file.name not in [log['name'] for log in st.session_state.logs]:
                try:
                    df = pd.read_csv(uploaded_file)
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                    df = df.rename(columns={
                        'Time [ms]': 'time_ms',
                        'Engine Speed (RPM) [1/min]': 'rpm',
                        'Vehicle Speed [km/h]': 'speed_kmh'
                    })
                    
                    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    df = df.dropna(subset=['time_ms', 'rpm', 'speed_kmh'])
                    df['time_s'] = df['time_ms'] / 1000.0
                    df['speed_mps'] = df['speed_kmh'] / 3.6
                    df['acceleration'] = np.gradient(df['speed_mps'], df['time_s'])
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ session state
                    st.session_state.logs.append({
                        'name': uploaded_file.name,
                        'data': df,
                        'visible': True,
                        'color': st.session_state.colors[len(st.session_state.logs) % len(st.session_state.colors)]
                    })
                    
                    st.success(f"‚úÖ {uploaded_file.name} –∑–∞–≥—Ä—É–∂–µ–Ω")
                    
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {uploaded_file.name}: {str(e)}")
    
    if not st.session_state.logs:
        st.info("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    # –ü–∞–Ω–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    st.sidebar.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞")
    
    car_mass = st.sidebar.slider(
        "–ú–∞—Å—Å–∞ –∞–≤—Ç–æ (–∫–≥)",
        min_value=500,
        max_value=3000,
        value=1500,
        step=50
    )
    
    drive_type = st.sidebar.radio(
        "–¢–∏–ø –ø—Ä–∏–≤–æ–¥–∞",
        options=["fwd", "rwd", "awd"],
        format_func=lambda x: {
            "fwd": "FWD (10% –ø–æ—Ç–µ—Ä—å)",
            "rwd": "RWD (15% –ø–æ—Ç–µ—Ä—å)", 
            "awd": "AWD (20% –ø–æ—Ç–µ—Ä—å)"
        }[x]
    )
    
    drive_losses = {
        "fwd": 0.10,
        "rwd": 0.15, 
        "awd": 0.20
    }
    
    power_type = st.sidebar.radio(
        "–¢–∏–ø –º–æ—â–Ω–æ—Å—Ç–∏",
        options=["wheel", "crank"],
        format_func=lambda x: "WHP (–∫–æ–ª–µ—Å–æ)" if x == "wheel" else "Crank HP (–¥–≤–∏–≥–∞—Ç–µ–ª—å)"
    )
    
    smooth_window = st.sidebar.slider(
        "–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ",
        min_value=3,
        max_value=99,
        value=15,
        step=2,
        help="–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è –°–∞–≤–∏—Ü–∫–æ–≥–æ-–ì–æ–ª–µ—è"
    )
    
    # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –ª–æ–≥–æ–≤
    st.sidebar.header("üëÅÔ∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤")
    for i, log in enumerate(st.session_state.logs):
        log['visible'] = st.sidebar.checkbox(
            log['name'],
            value=log['visible'],
            key=f"visible_{i}"
        )
    
    # –†–∞—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    processed_logs = []
    for log in st.session_state.logs:
        if log['visible']:
            try:
                processed_df = calculate_power_and_torque(
                    log['data'], car_mass, drive_losses[drive_type], power_type, smooth_window
                )
                
                # –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–∏–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                max_hp_idx = processed_df['final_hp'].idxmax()
                max_tq_idx = processed_df['final_tq'].idxmax()
                
                processed_logs.append({
                    'name': log['name'],
                    'data': processed_df,
                    'color': log['color'],
                    'max_hp': {
                        'value': processed_df['final_hp'].iloc[max_hp_idx],
                        'rpm': processed_df['smooth_rpm'].iloc[max_hp_idx]
                    },
                    'max_tq': {
                        'value': processed_df['final_tq'].iloc[max_tq_idx],
                        'rpm': processed_df['smooth_rpm'].iloc[max_tq_idx]
                    }
                })
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {log['name']}: {str(e)}")
    
    if not processed_logs:
        st.warning("‚ö†Ô∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig = make_subplots(
        specs=[[{"secondary_y": True}]]
    )
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≥—Ä–∞—Ñ–∏–∫
    for log in processed_logs:
        df = log['data']
        
        # –ú–æ—â–Ω–æ—Å—Ç—å (–æ—Å–Ω–æ–≤–Ω–∞—è –æ—Å—å Y)
        fig.add_trace(
            go.Scatter(
                x=df['smooth_rpm'],
                y=df['final_hp'],
                name=f"{log['name']} - HP",
                line=dict(color=log['color'], width=2),
                hovertemplate=(
                    "RPM: %{x:.0f}<br>" +
                    "–ú–æ—â–Ω–æ—Å—Ç—å: %{y:.1f} HP<br>" +
                    "–ú–æ–º–µ–Ω—Ç: %{customdata:.1f} Nm<br>" +
                    "<extra></extra>"
                ),
                customdata=df['final_tq']
            ),
            secondary_y=False
        )
        
        # –ú–æ–º–µ–Ω—Ç (–≤—Ç–æ—Ä–∏—á–Ω–∞—è –æ—Å—å Y)
        fig.add_trace(
            go.Scatter(
                x=df['smooth_rpm'],
                y=df['final_tq'],
                name=f"{log['name']} - TQ",
                line=dict(color=log['color'], width=2, dash='dash'),
                hovertemplate=(
                    "RPM: %{x:.0f}<br>" +
                    "–ú–æ–º–µ–Ω—Ç: %{y:.1f} Nm<br>" +
                    "–ú–æ—â–Ω–æ—Å—Ç—å: %{customdata:.1f} HP<br>" +
                    "<extra></extra>"
                ),
                customdata=df['final_hp'],
                showlegend=False
            ),
            secondary_y=True
        )
        
        # –ü–∏–∫–∏ –º–æ—â–Ω–æ—Å—Ç–∏
        fig.add_trace(
            go.Scatter(
                x=[log['max_hp']['rpm']],
                y=[log['max_hp']['value']],
                mode='markers+text',
                marker=dict(size=10, color=log['color'], symbol='circle'),
                text=[f"{log['max_hp']['value']:.1f} HP"],
                textposition="top center",
                name=f"{log['name']} - Max HP",
                showlegend=False,
                hovertemplate=(
                    f"–ü–∏–∫ –º–æ—â–Ω–æ—Å—Ç–∏<br>" +
                    "RPM: %{x:.0f}<br>" +
                    "–ú–æ—â–Ω–æ—Å—Ç—å: %{y:.1f} HP<br>" +
                    "<extra></extra>"
                )
            ),
            secondary_y=False
        )
        
        # –ü–∏–∫–∏ –º–æ–º–µ–Ω—Ç–∞
        fig.add_trace(
            go.Scatter(
                x=[log['max_tq']['rpm']],
                y=[log['max_tq']['value']],
                mode='markers+text',
                marker=dict(size=10, color=log['color'], symbol='x'),
                text=[f"{log['max_tq']['value']:.1f} Nm"],
                textposition="bottom center",
                name=f"{log['name']} - Max TQ",
                showlegend=False,
                hovertemplate=(
                    f"–ü–∏–∫ –º–æ–º–µ–Ω—Ç–∞<br>" +
                    "RPM: %{x:.0f}<br>" +
                    "–ú–æ–º–µ–Ω—Ç: %{y:.1f} Nm<br>" +
                    "<extra></extra>"
                )
            ),
            secondary_y=True
        )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ layout
    fig.update_layout(
        title="–î–∏–Ω–æ—Å—Ç–µ–Ω–¥ - –ú–æ—â–Ω–æ—Å—Ç—å –∏ –ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç",
        xaxis_title="–û–±–æ—Ä–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è (RPM)",
        hovermode='x unified',
        height=600,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
    fig.update_yaxes(
        title_text="–ú–æ—â–Ω–æ—Å—Ç—å (HP)",
        secondary_y=False,
        gridcolor='lightgray'
    )
    
    fig.update_yaxes(
        title_text="–ö—Ä—É—Ç—è—â–∏–π –º–æ–º–µ–Ω—Ç (Nm)", 
        secondary_y=True,
        gridcolor='lightgray'
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    st.plotly_chart(fig, use_container_width=True)
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å –ø–∏–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    st.subheader("üìà –ü–∏–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    
    peak_data = []
    for log in processed_logs:
        peak_data.append({
            '–§–∞–π–ª': log['name'],
            '–ú–∞–∫—Å. –º–æ—â–Ω–æ—Å—Ç—å (HP)': f"{log['max_hp']['value']:.1f}",
            '–û–±–æ—Ä–æ—Ç—ã –º–∞–∫—Å. –º–æ—â–Ω–æ—Å—Ç–∏': f"{log['max_hp']['rpm']:.0f}",
            '–ú–∞–∫—Å. –º–æ–º–µ–Ω—Ç (Nm)': f"{log['max_tq']['value']:.1f}",
            '–û–±–æ—Ä–æ—Ç—ã –º–∞–∫—Å. –º–æ–º–µ–Ω—Ç–∞': f"{log['max_tq']['rpm']:.0f}"
        })
    
    peak_df = pd.DataFrame(peak_data)
    st.dataframe(peak_df, use_container_width=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
    with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—á–µ—Ç–∞—Ö"):
        st.markdown(f"""
        **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:**
        - –ú–∞—Å—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {car_mass} –∫–≥
        - –¢–∏–ø –ø—Ä–∏–≤–æ–¥–∞: {drive_type.upper()} ({drive_losses[drive_type]*100:.0f}% –ø–æ—Ç–µ—Ä—å)
        - –¢–∏–ø –º–æ—â–Ω–æ—Å—Ç–∏: {'Crank HP (–¥–≤–∏–≥–∞—Ç–µ–ª—å)' if power_type == 'crank' else 'WHP (–∫–æ–ª–µ—Å–æ)'}
        - –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ: –æ–∫–Ω–æ {smooth_window} —Ç–æ—á–µ–∫
        
        **–ú–µ—Ç–æ–¥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞:**
        - –ú–æ—â–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ
        - –ü–æ—Ç–µ—Ä–∏ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –¥–ª—è crank –º–æ—â–Ω–æ—Å—Ç–∏
        - –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –°–∞–≤–∏—Ü–∫–æ–≥–æ-–ì–æ–ª–µ—è
        - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∏–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        """)

if __name__ == "__main__":
    main()