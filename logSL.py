import streamlit as st
import pandas as pd
import numpy as np
import os
from io import StringIO
import base64

st.set_page_config(
    page_title="CSV Column Filter",
    page_icon="üìä",
    layout="wide"
)

def auto_select_columns(columns):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ"""
    target_columns = [
        "Time [ms]",
        "Engine Speed (RPM) [1/min]", 
        "Vehicle Speed [km/h]"
    ]
    
    selected_columns = []
    
    # –ò—â–µ–º —Ü–µ–ª–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
    for col in columns:
        if col in target_columns:
            selected_columns.append(col)
    
    return selected_columns

def auto_set_last_row_settings(columns):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–µ–∑–∫—É –ø–æ —Å—Ç–æ–ª–±—Ü—É Engine Speed"""
    target_column = "Engine Speed (RPM) [1/min]"
    
    if target_column in columns:
        return {
            'method': 'column',
            'column': target_column,
            'operator': '>=',
            'value': '1'
        }
    return {'method': 'none'}

def get_download_link(df, filename):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV —Ñ–∞–π–ª–∞"""
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="{filename}" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-align: center; text-decoration: none; display: inline-block; border-radius: 4px;">üì• –°–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª</a>'
    return href

def main():
    st.title("üìä CSV Column Filter")
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
    if 'uploaded_file' not in st.session_state:
        st.session_state.uploaded_file = None
    if 'df_original' not in st.session_state:
        st.session_state.df_original = None
    if 'selected_columns' not in st.session_state:
        st.session_state.selected_columns = []
    if 'rename_map' not in st.session_state:
        st.session_state.rename_map = {}
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª",
        type=['csv'],
        help="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞"
    )
    
    if uploaded_file is not None:
        st.session_state.uploaded_file = uploaded_file
        
        try:
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            df = pd.read_csv(uploaded_file)
            st.session_state.df_original = df
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
            columns = list(df.columns)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤
            auto_selected = auto_select_columns(columns)
            st.session_state.selected_columns = auto_selected
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–µ–∑–∫–∏
            auto_settings = auto_set_last_row_settings(columns)
            
            st.success(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            st.write(f"**–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:** {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
            tab1, tab2, tab3 = st.tabs(["üìã –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤", "‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "‚úÇÔ∏è –û–±—Ä–µ–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"])
            
            with tab1:
                st.header("–í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.subheader("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã")
                    all_columns = st.multiselect(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
                        options=columns,
                        default=auto_selected,
                        key="columns_multiselect"
                    )
                    
                with col2:
                    st.subheader("–†—É—á–Ω–æ–π –≤–≤–æ–¥")
                    st.markdown("–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
                    manual_columns = st.text_input(
                        "–°—Ç–æ–ª–±—Ü—ã:",
                        value=", ".join(auto_selected),
                        key="manual_columns"
                    )
                
                # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                if manual_columns.strip():
                    manual_list = [col.strip() for col in manual_columns.split(',') if col.strip()]
                    combined_columns = list(set(all_columns + manual_list))
                else:
                    combined_columns = all_columns
                
                st.session_state.selected_columns = combined_columns
                
                if combined_columns:
                    st.info(f"**–í—ã–±—Ä–∞–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤:** {len(combined_columns)}")
                    st.write("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:", ", ".join(combined_columns))
                else:
                    st.warning("‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞")
            
            with tab2:
                st.header("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤")
                
                if st.session_state.selected_columns:
                    st.markdown("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è):")
                    
                    rename_map = {}
                    for i, col in enumerate(st.session_state.selected_columns):
                        col1, col2 = st.columns([1, 2])
                        with col1:
                            st.text_input(
                                f"–°—Ç–æ–ª–±–µ—Ü {i+1} (–æ—Ä–∏–≥–∏–Ω–∞–ª):",
                                value=col,
                                key=f"orig_{i}",
                                disabled=True
                            )
                        with col2:
                            new_name = st.text_input(
                                f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ {i+1}:",
                                value=col,
                                key=f"new_{i}"
                            )
                            if new_name and new_name != col:
                                rename_map[col] = new_name
                    
                    st.session_state.rename_map = rename_map
                    
                    if rename_map:
                        st.success("**–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:**")
                        for orig, new in rename_map.items():
                            st.write(f"`{orig}` ‚Üí `{new}`")
                else:
                    st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ '–í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤'")
            
            with tab3:
                st.header("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏")
                
                st.radio(
                    "–ú–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏:",
                    options=["none", "column", "manual"],
                    format_func=lambda x: {
                        "none": "–ù–µ –æ–±—Ä–µ–∑–∞—Ç—å",
                        "column": "–ü–æ —É—Å–ª–æ–≤–∏—é –≤ —Å—Ç–æ–ª–±—Ü–µ", 
                        "manual": "–ü–æ —Ä—É—á–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é"
                    }[x],
                    key="last_row_method",
                    index=["none", "column", "manual"].index(auto_settings['method'])
                )
                
                if st.session_state.last_row_method == "column":
                    col1, col2, col3 = st.columns([2, 1, 1])
                    
                    with col1:
                        st.selectbox(
                            "–°—Ç–æ–ª–±–µ—Ü:",
                            options=st.session_state.selected_columns,
                            key="last_row_column",
                            index=st.session_state.selected_columns.index(auto_settings['column']) if auto_settings['column'] in st.session_state.selected_columns else 0
                        )
                    
                    with col2:
                        operators = ["==", "!=", ">", ">=", "<", "<="]
                        st.selectbox(
                            "–£—Å–ª–æ–≤–∏–µ:",
                            options=operators,
                            key="condition_operator",
                            index=operators.index(auto_settings['operator'])
                        )
                    
                    with col3:
                        st.text_input(
                            "–ó–Ω–∞—á–µ–Ω–∏–µ:",
                            value=auto_settings['value'],
                            key="condition_value"
                        )
                
                elif st.session_state.last_row_method == "manual":
                    st.text_input(
                        "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –ª—é–±–æ–º —Å—Ç–æ–ª–±—Ü–µ):",
                        key="manual_value"
                    )
            
            # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            st.markdown("---")
            if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", type="primary", use_container_width=True):
                if not st.session_state.selected_columns:
                    st.error("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞")
                    return
                
                try:
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
                    filtered_df = df[st.session_state.selected_columns].copy()
                    
                    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
                    if st.session_state.rename_map:
                        filtered_df = filtered_df.rename(columns=st.session_state.rename_map)
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
                    last_row_info = ""
                    method = st.session_state.last_row_method
                    
                    if method == "column":
                        last_row_column = st.session_state.last_row_column
                        condition_value = st.session_state.condition_value.strip()
                        operator = st.session_state.condition_operator
                        
                        if last_row_column and condition_value:
                            try:
                                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                                try:
                                    numeric_series = pd.to_numeric(filtered_df[last_row_column], errors='raise')
                                    condition_val = float(condition_value)
                                except ValueError:
                                    # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ–≤–æ–π, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
                                    numeric_series = filtered_df[last_row_column].astype(str)
                                    condition_val = condition_value
                                
                                # –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
                                if operator == "==":
                                    mask = numeric_series == condition_val
                                elif operator == "!=":
                                    mask = numeric_series != condition_val
                                elif operator == ">":
                                    mask = numeric_series > condition_val
                                elif operator == ">=":
                                    mask = numeric_series >= condition_val
                                elif operator == "<":
                                    mask = numeric_series < condition_val
                                elif operator == "<=":
                                    mask = numeric_series <= condition_val
                                
                                # –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–µ–π —É—Å–ª–æ–≤–∏—é
                                first_match_idx = mask.idxmax() if mask.any() else None
                                
                                if first_match_idx is not None:
                                    filtered_df = filtered_df.loc[:first_match_idx]
                                    matched_value = filtered_df[last_row_column].iloc[first_match_idx]
                                    last_row_info = f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ —É—Å–ª–æ–≤–∏—é '{last_row_column} {operator} {condition_value}' (–Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {matched_value})"
                                else:
                                    st.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—é '{last_row_column} {operator} {condition_value}'")
                                    return
                                    
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ª–æ–≤–∏—è: {str(e)}")
                                return
                    
                    elif method == "manual":
                        manual_value = st.session_state.manual_value.strip()
                        if manual_value:
                            try:
                                mask = (filtered_df.astype(str) == manual_value).any(axis=1)
                                if not mask.any():
                                    st.error(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ '{manual_value}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ")
                                    return
                                
                                first_idx = mask.idxmax()
                                filtered_df = filtered_df.loc[:first_idx]
                                last_row_info = f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ –ø–µ—Ä–≤–æ–º—É –≤—Ö–æ–∂–¥–µ–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏—è '{manual_value}'"
                                
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è '{manual_value}': {str(e)}")
                                return
                    
                    # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    st.success("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                    
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric("–ò—Å—Ö–æ–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫", df.shape[0])
                    with col2:
                        st.metric("–†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫", len(filtered_df))
                    with col3:
                        st.metric("–°—Ç–æ–ª–±—Ü–æ–≤", len(filtered_df.columns))
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏
                    if st.session_state.rename_map:
                        st.info("**–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:**")
                        for orig, new in st.session_state.rename_map.items():
                            st.write(f"`{orig}` ‚Üí `{new}`")
                    
                    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—Ä–µ–∑–∫–µ
                    if last_row_info:
                        st.info(f"**{last_row_info}**")
                    
                    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
                    with st.expander("üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"):
                        st.dataframe(filtered_df.head(10))
                    
                    # –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    original_name = os.path.splitext(uploaded_file.name)[0]
                    output_filename = f"{original_name}_filtered.csv"
                    
                    st.markdown(get_download_link(filtered_df, output_filename), unsafe_allow_html=True)
                    
                except Exception as e:
                    st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    
    else:
        st.info("üìÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        
        # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞
        with st.expander("‚ÑπÔ∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É"):
            st.markdown("""
            –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å CSV –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏:
            - `Time [ms]` - –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            - `Engine Speed (RPM) [1/min]` - –æ–±–æ—Ä–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è
            - `Vehicle Speed [km/h]` - —Å–∫–æ—Ä–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            
            –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —ç—Ç–∏ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Ñ–∞–π–ª–µ.
            """)

if __name__ == "__main__":
    main()